name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4
          
    - name: Azure Login
      run: |
          az login --service-principal \
            -u ${{ secrets.AZURE_CLIENT_ID }} \
            -p ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: sed command for env
      run: |
        sed -i s/tag/dev/g backend.tf

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      #with:
        #cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -var-file=variables/dev-terraform.tfvars

    - name: Terraform Validate
      run: terraform validate

    # Generates an execution plan for Terraform
    -# name: Terraform Plan
      #run: terraform plan -var-file=variables/dev-terraform.tfvars

    - name: Terraform Plan
      run: terraform plan -input=false -var="client_id=${{ secrets.AZURE_CLIENT_ID }}" \
                      -var="client_secret=${{ secrets.AZURE_CLIENT_SECRET }}" \
                      -var="tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
                      -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
                      -var-file=variables/dev-terraform.tfvars
  

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false -var-file=variables/dev-terraform.tfvars
